// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/notification/notification.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	notification "eventdrivensystem/internal/models/notification"
	util "eventdrivensystem/pkg/util"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockNotificationDomainHandler is a mock of NotificationDomainHandler interface.
type MockNotificationDomainHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationDomainHandlerMockRecorder
}

// MockNotificationDomainHandlerMockRecorder is the mock recorder for MockNotificationDomainHandler.
type MockNotificationDomainHandlerMockRecorder struct {
	mock *MockNotificationDomainHandler
}

// NewMockNotificationDomainHandler creates a new mock instance.
func NewMockNotificationDomainHandler(ctrl *gomock.Controller) *MockNotificationDomainHandler {
	mock := &MockNotificationDomainHandler{ctrl: ctrl}
	mock.recorder = &MockNotificationDomainHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationDomainHandler) EXPECT() *MockNotificationDomainHandlerMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockNotificationDomainHandler) BeginTx(ctx context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockNotificationDomainHandlerMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockNotificationDomainHandler)(nil).BeginTx), ctx)
}

// CreateNotification mocks base method.
func (m *MockNotificationDomainHandler) CreateNotification(ctx context.Context, p *notification.Notification, opts ...util.DbOptions) (*notification.Notification, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, p}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNotification", varargs...)
	ret0, _ := ret[0].(*notification.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockNotificationDomainHandlerMockRecorder) CreateNotification(ctx, p interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, p}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockNotificationDomainHandler)(nil).CreateNotification), varargs...)
}

// GetNotification mocks base method.
func (m *MockNotificationDomainHandler) GetNotification(ctx context.Context, p *notification.GetNotificationParam) (*notification.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotification", ctx, p)
	ret0, _ := ret[0].(*notification.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotification indicates an expected call of GetNotification.
func (mr *MockNotificationDomainHandlerMockRecorder) GetNotification(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotification", reflect.TypeOf((*MockNotificationDomainHandler)(nil).GetNotification), ctx, p)
}

// UpdateNotification mocks base method.
func (m *MockNotificationDomainHandler) UpdateNotification(ctx context.Context, p *notification.Notification, opts ...util.DbOptions) (*notification.Notification, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, p}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNotification", varargs...)
	ret0, _ := ret[0].(*notification.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotification indicates an expected call of UpdateNotification.
func (mr *MockNotificationDomainHandlerMockRecorder) UpdateNotification(ctx, p interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, p}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotification", reflect.TypeOf((*MockNotificationDomainHandler)(nil).UpdateNotification), varargs...)
}
