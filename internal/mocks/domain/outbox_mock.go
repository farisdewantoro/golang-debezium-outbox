// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/outbox/outbox.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "eventdrivensystem/internal/models/outbox"
	util "eventdrivensystem/pkg/util"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOutboxDomainHandler is a mock of OutboxDomainHandler interface.
type MockOutboxDomainHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxDomainHandlerMockRecorder
}

// MockOutboxDomainHandlerMockRecorder is the mock recorder for MockOutboxDomainHandler.
type MockOutboxDomainHandlerMockRecorder struct {
	mock *MockOutboxDomainHandler
}

// NewMockOutboxDomainHandler creates a new mock instance.
func NewMockOutboxDomainHandler(ctrl *gomock.Controller) *MockOutboxDomainHandler {
	mock := &MockOutboxDomainHandler{ctrl: ctrl}
	mock.recorder = &MockOutboxDomainHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboxDomainHandler) EXPECT() *MockOutboxDomainHandlerMockRecorder {
	return m.recorder
}

// CreateOutbox mocks base method.
func (m *MockOutboxDomainHandler) CreateOutbox(ctx context.Context, Outbox *models.OutboxEvent, opts ...util.DbOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Outbox}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOutbox", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOutbox indicates an expected call of CreateOutbox.
func (mr *MockOutboxDomainHandlerMockRecorder) CreateOutbox(ctx, Outbox interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Outbox}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutbox", reflect.TypeOf((*MockOutboxDomainHandler)(nil).CreateOutbox), varargs...)
}
