// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/logger/logger.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	logger "eventdrivensystem/pkg/logger"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), v...)
}

// DebugWithContext mocks base method.
func (m *MockLogger) DebugWithContext(ctx context.Context, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DebugWithContext", varargs...)
}

// DebugWithContext indicates an expected call of DebugWithContext.
func (mr *MockLoggerMockRecorder) DebugWithContext(ctx interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugWithContext", reflect.TypeOf((*MockLogger)(nil).DebugWithContext), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), v...)
}

// ErrorWithContext mocks base method.
func (m *MockLogger) ErrorWithContext(ctx context.Context, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ErrorWithContext", varargs...)
}

// ErrorWithContext indicates an expected call of ErrorWithContext.
func (mr *MockLoggerMockRecorder) ErrorWithContext(ctx interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorWithContext", reflect.TypeOf((*MockLogger)(nil).ErrorWithContext), varargs...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(message string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(message interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// ErrorfWithContext mocks base method.
func (m *MockLogger) ErrorfWithContext(ctx context.Context, message string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, message}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ErrorfWithContext", varargs...)
}

// ErrorfWithContext indicates an expected call of ErrorfWithContext.
func (mr *MockLoggerMockRecorder) ErrorfWithContext(ctx, message interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, message}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorfWithContext", reflect.TypeOf((*MockLogger)(nil).ErrorfWithContext), varargs...)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), v...)
}

// FatalWithContext mocks base method.
func (m *MockLogger) FatalWithContext(ctx context.Context, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "FatalWithContext", varargs...)
}

// FatalWithContext indicates an expected call of FatalWithContext.
func (mr *MockLoggerMockRecorder) FatalWithContext(ctx interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FatalWithContext", reflect.TypeOf((*MockLogger)(nil).FatalWithContext), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), v...)
}

// InfoWithContext mocks base method.
func (m *MockLogger) InfoWithContext(ctx context.Context, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InfoWithContext", varargs...)
}

// InfoWithContext indicates an expected call of InfoWithContext.
func (mr *MockLoggerMockRecorder) InfoWithContext(ctx interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoWithContext", reflect.TypeOf((*MockLogger)(nil).InfoWithContext), varargs...)
}

// Infof mocks base method.
func (m *MockLogger) Infof(message string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(message interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// InfofWithContext mocks base method.
func (m *MockLogger) InfofWithContext(ctx context.Context, message string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, message}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InfofWithContext", varargs...)
}

// InfofWithContext indicates an expected call of InfofWithContext.
func (mr *MockLoggerMockRecorder) InfofWithContext(ctx, message interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, message}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfofWithContext", reflect.TypeOf((*MockLogger)(nil).InfofWithContext), varargs...)
}

// Panic mocks base method.
func (m *MockLogger) Panic(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic.
func (mr *MockLoggerMockRecorder) Panic(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLogger)(nil).Panic), v...)
}

// PanicWithContext mocks base method.
func (m *MockLogger) PanicWithContext(ctx context.Context, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PanicWithContext", varargs...)
}

// PanicWithContext indicates an expected call of PanicWithContext.
func (mr *MockLoggerMockRecorder) PanicWithContext(ctx interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PanicWithContext", reflect.TypeOf((*MockLogger)(nil).PanicWithContext), varargs...)
}

// SetOptions mocks base method.
func (m *MockLogger) SetOptions(opt logger.Options) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOptions", opt)
}

// SetOptions indicates an expected call of SetOptions.
func (mr *MockLoggerMockRecorder) SetOptions(opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOptions", reflect.TypeOf((*MockLogger)(nil).SetOptions), opt)
}

// Trace mocks base method.
func (m *MockLogger) Trace(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Trace", varargs...)
}

// Trace indicates an expected call of Trace.
func (mr *MockLoggerMockRecorder) Trace(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockLogger)(nil).Trace), v...)
}

// TraceWithContext mocks base method.
func (m *MockLogger) TraceWithContext(ctx context.Context, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "TraceWithContext", varargs...)
}

// TraceWithContext indicates an expected call of TraceWithContext.
func (mr *MockLoggerMockRecorder) TraceWithContext(ctx interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceWithContext", reflect.TypeOf((*MockLogger)(nil).TraceWithContext), varargs...)
}

// Warn mocks base method.
func (m *MockLogger) Warn(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), v...)
}

// WarnWithContext mocks base method.
func (m *MockLogger) WarnWithContext(ctx context.Context, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WarnWithContext", varargs...)
}

// WarnWithContext indicates an expected call of WarnWithContext.
func (mr *MockLoggerMockRecorder) WarnWithContext(ctx interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnWithContext", reflect.TypeOf((*MockLogger)(nil).WarnWithContext), varargs...)
}
